import java.util.Arrays;

public class MergeSort {
    public static void main(String[] args) {
        int[] arr = new int[]{6,4,8,7,2,3,1,5};
        mergeSort(arr,0,arr.length-1);
        System.out.println(Arrays.toString(arr));
    }

//  归并排序
    public static void mergeSort(int[] arr,int low,int high){
        int middle=(low+high)/2;
        if(low<high){
            mergeSort(arr,low,middle);
            mergeSort(arr,middle+1,high);
            merge(arr,low,middle,high);
        }
    }

    public static void merge(int[] arr,int low,int middle,int high){
//      用于存储归并后的临时数组
        int[] temp = new int[high-low+1];
//      记录第一个数组中需要遍历的下标
        int i=low;
//      记录第二个数组中需要遍历的下标
        int j=middle+1;
//      用于记录在临时数组中存放的下标
        int index=0;
//      遍历两个数组取出小的数字，放入临时数组中
        while(i<=middle&&j<=high){
            if (arr[i]<=arr[j]){
                temp[index++]=arr[i];
                i++;
            }else{
                temp[index++]=arr[j];
                j++;
            }
        }
//      处理多余的数字,第二个数组中还有多的数字
        while(j<=high){
            temp[index++]=arr[j];
            j++;
        }
//      处理多余的数字，第一个数组中还有多的数字
        while(i<=middle){
            temp[index++]=arr[i];
            i++;
        }
//      把临时数组中的数据重新存入原数组
        for(int k=0;k<temp.length;k++){
            arr[k+low]=temp[k];
        }
    }
}
