
public class Node {
    int value;
    Node left;
    Node right;

    public Node(int value){
        this.value = value;
    }

    //向子树中添加节点
    public void add(Node node){
        if (node == null){
            return;
        }
        if (node.value < this.value){
            if (this.left == null){
                this.left=node;
            }else{
                this.left.add(node);
            }
        }
        if (node.value>this.value){
            if (this.right==null){
                this.right=node;
            }else{
                this.right.add(node);
            }
        }
    }

    //中序遍历
    public void midShow(Node node){
        if (node==null){
            return ;
        }
        midShow(node.left);
        System.out.println(node.value);
        midShow(node.right);
    }

    //查找结点
    public Node search(int value){
        if (this.value==value){
            return this;
        }else if (value<this.value){
            if (left==null){
                return null;
            }
            return left.search(value);
        }else{
            if (right==null){
                return null;
            }
            return right.search(value);
        }
    }
    //查找父节点
    public Node searchParent(int value){
        if ((this.left!=null&&this.left.value==value)||this.right!=null&&this.right.value==value){
            return this;
        }else{
            if (this.value>value&&this.left!=null) {
                return this.left.searchParent(value);
            }else if (this.value<value&&this.right!=null){
                return this.right.searchParent(value);
            }
            return null;
        }
    }
}




package day7;

public class BinarySortTree {
    Node root;
    //添加元素
    public void add(Node node){
        if (root==null){
            root =node ;
        }else{
            root.add(node);
        }
    }
    //中序遍历二叉树
    public void midShow(){
        if (root!=null){
            root.midShow(root);
        }
    }
//    节点的查找
    public Node search(int value){
        if (root == null){
            return null;
        }else {
            return root.search(value);
        }
    }
    //删除节点
    public void delete(int value){
        if (root == null){
            return ;
        }else{
            Node target = search(value);
            if (target == null){
                return ;
            }
            Node parent = searchParent(value);
            //要删除的节点是叶子节点

            if (target.left==null&&target.right==null){
                if (value == parent.left.value) {
                parent.left = null;
                }else{
                    parent.right = null;
                }
            } //要删除的节点有两个节点
            else if (target.left!=null&&target.right!=null) {
                int min = deleteMin(target.right);
                target.value=min;

            }else{
                if (target.left!=null){
                    if (parent.left.value==value){
                        parent.left=target.left;
                    }else if(parent.right.value==value){
                        parent.right=target.left;
                    }
                }else{
                    if (parent.right.value==value){
                        parent.left=target.right;
                    }else if(parent.right.value==value){
                        parent.right=target.right;
                    }
                }
            }
        }
    }
    //删除最小值
    private int deleteMin(Node node) {
        Node target = node;
        while(node.left!=null){
            target=target.left;
        }
        delete(target.value);
        return target.value;
    }

    //搜索父节点
    public Node searchParent(int value){
        if (root==null){
         return null;
        }
        else{
            return root.searchParent(value);
        }
    }
}



package day7;

public class TestBinarySortTree {
    public static void main(String[] args){
        int[] arr = new int[]{7,3,10,12,5,1,9};
        BinarySortTree bst = new BinarySortTree();
        for (int i:arr) {
            bst.add(new Node(i));
        }
        bst.midShow();
        System.out.println("=============================");
        Node node = bst.search(10);
        System.out.println(node.value);
        System.out.println("=============================");

        Node p1 = bst.searchParent(1);
        System.out.println(p1.value);
        System.out.println("==============================");

        bst.delete(5);
        bst.midShow();
        System.out.println("==============================");

        bst.delete(3);
        bst.midShow();


    }
}














